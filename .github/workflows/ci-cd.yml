name: DevSecOps CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - develop

permissions:
  contents: write
  pull-requests: write

jobs:
  # Job 1: Code formatting and linting
  formatting-and-linting:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          pip install black isort ruff

      - name: Run isort
        run: isort .

      - name: Run black
        run: black .

      - name: Run ruff
        run: ruff check .

  # Job 2: Unit tests with coverage
  run-pytest:
    name: Unit Test
    needs: formatting-and-linting
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi "uvicorn[standard]" pytest pytest-cov coverage httpx

      - name: Run pytest with coverage
        run: |
          PYTHONPATH=. coverage run -m pytest -rap --junitxml coverage.xml || true
          coverage xml -i 

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.xml
          
  # Job 3: Run a static analysis security scan with Bandit
  run-bandit:
    name: Static application security testing
    needs: formatting-and-linting
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit security analysis
        run: |
          bandit -r . -f json -o bandit-report.json --exit-zero

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

  # Job 4: Dependency security scan with Safety
  run-safety:
    name: Dependency Check
    needs: formatting-and-linting
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Safety
        run: pip install safety

      - name: Create requirements.txt
        run: |
          pip install fastapi "uvicorn[standard]" pytest httpx pytest-cov
          pip freeze > requirements.txt

      - name: Run Safety dependency check
        run: |
          safety check -r requirements.txt

  # Job 5: Advanced coverage reporting
  coverage:
    needs: [run-pytest]
    name: Calculate code coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: .

      - name: Produce the coverage report
        uses: insightsengineering/coverage-action@v2
        with:
          # Path to the Cobertura XML report.
          path: coverage.xml
          # Minimum total coverage, if you want to the
          # workflow to enforce it as a standard.
          # This has no effect if the `fail` arg is set to `false`.
          threshold: 80.123
          # Fail the workflow if the minimum code coverage
          # reuqirements are not satisfied.
          fail: true
          # Publish the rendered output as a PR comment
          publish: true
          # Create a coverage diff report.
          diff: true
          # Branch to diff against.
          # Compare the current coverage to the coverage
          # determined on this branch.
          diff-branch: main
          # This is where the coverage reports for the
          # `diff-branch` are stored.
          # Branch is created if it doesn't already exist'.
          diff-storage: _xml_coverage_reports
          # A custom title that can be added to the code
          # coverage summary in the PR comment.
          coverage-summary-title: "Code Coverage Summary"

  # Job 6: Build a Docker image and scan it with Trivy
  build-and-scan-docker:
    needs: [run-bandit, run-safety] # This job depends on security scans passing
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
          file: ./Dockerfile

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:latest'
          format: 'table'
          severity: 'HIGH,CRITICAL'
          
  # Job 7: Deploy to a staging environment and run DAST scan with ZAP
  dast-and-deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs: build-and-scan-docker # This job depends on the build and scan passing
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        
      # Placeholder for a real deployment step (e.g., to a cloud service)
      - name: Deploy to Staging Environment
        run: echo "Deploying application to staging..."
      
      - name: Run OWASP ZAP DAST scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: 'http://your-staging-url.com'
          fail_action: true
          
  # Job 8: Final deployment to production
  deploy-production:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build-and-scan-docker # Only run DAST if needed, then deploy
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Production Environment
        run: echo "Deploying application to production..."