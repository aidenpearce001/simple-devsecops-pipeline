name: DevSecOps CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # Job 0: Validate that PR is from develop to main
  validate-pr:
    runs-on: ubuntu-latest
    outputs:
      is-valid: ${{ steps.check.outputs.is-valid }}
    steps:
      - name: Check if PR is from develop to main
        id: check
        run: |
          if [ "${{ github.head_ref }}" = "develop" ] && [ "${{ github.base_ref }}" = "main" ]; then
            echo "is-valid=true" >> $GITHUB_OUTPUT
            echo "✅ Valid PR: develop → main"
          else
            echo "is-valid=false" >> $GITHUB_OUTPUT
            echo "❌ Invalid PR: Only PRs from develop to main are allowed"
            echo "Source: ${{ github.head_ref }}, Target: ${{ github.base_ref }}"
          fi

      - name: Comment on invalid PR
        if: steps.check.outputs.is-valid == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ❌ Invalid Pull Request
            
            This CI/CD pipeline only runs for pull requests from \`develop\` to \`main\`.
            
            **Current PR**: \`${{ github.head_ref }}\` → \`${{ github.base_ref }}\`
            **Required**: \`develop\` → \`main\`
            
            Please ensure your pull request is from the \`develop\` branch to the \`main\` branch.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Exit if invalid PR
        if: steps.check.outputs.is-valid == 'false'
        run: exit 1

  # Job 1: Code formatting and linting
  formatting-and-linting:
    needs: validate-pr
    if: needs.validate-pr.outputs.is-valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: pip install uv

      - name: Install Python dependencies
        run: |
          uv pip install --system black isort ruff

      - name: Run isort
        run: isort .

      - name: Run black
        run: black .

      - name: Run ruff
        run: ruff check .

  # Job 2: Unit tests with coverage
  run-pytest:
    name: Unit Test
    needs: [validate-pr, formatting-and-linting]
    if: needs.validate-pr.outputs.is-valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        run: |
          uv sync --frozen

      - name: Run pytest with coverage
        run: |
          source .venv/bin/activate
          PYTHONPATH=. coverage run -m pytest -rap --junitxml coverage.xml || true
          coverage xml -i 

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.xml

      - name: Comment PR with test results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read test results
            let testStatus = '✅ Tests passed';
            let coverageInfo = '';
            
            try {
              // Check if coverage.xml exists
              if (fs.existsSync('coverage.xml')) {
                const coverage = fs.readFileSync('coverage.xml', 'utf8');
                const match = coverage.match(/line-rate="([\d.]+)"/);
                if (match) {
                  const coveragePercent = (parseFloat(match[1]) * 100).toFixed(1);
                  coverageInfo = `\n📊 **Coverage**: ${coveragePercent}%`;
                }
              }
            } catch (error) {
              testStatus = '❌ Tests failed';
              console.log('Error reading test results:', error);
            }
            
            const comment = `## 🧪 Test Results
            
            ${testStatus}${coverageInfo}
            
            **Job**: Unit Tests & Coverage
            **Workflow**: ${context.workflow}
            **Run**: ${context.runNumber}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          
  # Job 3: Run a static analysis security scan with Bandit
  run-bandit:
    name: Static application security testing
    needs: [validate-pr, formatting-and-linting]
    if: needs.validate-pr.outputs.is-valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit security analysis
        run: |
          bandit -r . -f json -o bandit-report.json --exit-zero

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

      - name: Comment PR with Bandit results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let securityStatus = '✅ No security issues found';
            let issueDetails = '';
            
            try {
              if (fs.existsSync('bandit-report.json')) {
                const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
                const highIssues = banditReport.results.filter(r => r.issue_severity === 'HIGH').length;
                const mediumIssues = banditReport.results.filter(r => r.issue_severity === 'MEDIUM').length;
                const lowIssues = banditReport.results.filter(r => r.issue_severity === 'LOW').length;
                
                if (highIssues > 0 || mediumIssues > 0 || lowIssues > 0) {
                  securityStatus = '⚠️ Security issues detected';
                  issueDetails = `\n🔍 **Issues Found**: ${highIssues} High, ${mediumIssues} Medium, ${lowIssues} Low`;
                }
              }
            } catch (error) {
              securityStatus = '❌ Security scan failed';
              console.log('Error reading Bandit report:', error);
            }
            
            const comment = `## 🔒 Security Scan Results (Bandit)
            
            ${securityStatus}${issueDetails}
            
            **Job**: Static Application Security Testing
            **Workflow**: ${context.workflow}
            **Run**: ${context.runNumber}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job 4: Dependency security scan with Safety
  run-safety:
    name: Dependency Check
    needs: [validate-pr, formatting-and-linting]
    if: needs.validate-pr.outputs.is-valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv and dependencies
        run: |
          pip install uv
          uv sync --frozen
          uv pip install --system safety

      - name: Export requirements for Safety
        run: |
          source .venv/bin/activate
          uv pip freeze > requirements-frozen.txt

      - name: Run Safety dependency check
        run: |
          source .venv/bin/activate
          safety check -r requirements-frozen.txt --json --output safety-report.json || true

      - name: Comment PR with Safety results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let dependencyStatus = '✅ No vulnerable dependencies found';
            let vulnerabilityDetails = '';
            
            try {
              if (fs.existsSync('safety-report.json')) {
                const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
                
                if (safetyReport.vulnerabilities && safetyReport.vulnerabilities.length > 0) {
                  const vulnCount = safetyReport.vulnerabilities.length;
                  dependencyStatus = `⚠️ ${vulnCount} vulnerable dependencies found`;
                  
                  const highVulns = safetyReport.vulnerabilities.filter(v => v.severity && v.severity.toLowerCase() === 'high').length;
                  const mediumVulns = safetyReport.vulnerabilities.filter(v => v.severity && v.severity.toLowerCase() === 'medium').length;
                  const lowVulns = safetyReport.vulnerabilities.filter(v => v.severity && v.severity.toLowerCase() === 'low').length;
                  
                  vulnerabilityDetails = `\n🚨 **Vulnerabilities**: ${highVulns} High, ${mediumVulns} Medium, ${lowVulns} Low`;
                }
              } else {
                // If no JSON file, assume success
                dependencyStatus = '✅ No vulnerable dependencies found';
              }
            } catch (error) {
              dependencyStatus = '❌ Dependency scan failed';
              console.log('Error reading Safety report:', error);
            }
            
            const comment = `## 📦 Dependency Security Check (Safety)
            
            ${dependencyStatus}${vulnerabilityDetails}
            
            **Job**: Dependency Vulnerability Scan
            **Workflow**: ${context.workflow}
            **Run**: ${context.runNumber}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Job 5: Advanced coverage reporting
  coverage:
    needs: [validate-pr, run-pytest]
    if: needs.validate-pr.outputs.is-valid == 'true'
    name: Calculate code coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: .

      - name: Produce the coverage report
        uses: insightsengineering/coverage-action@v2
        with:
          # Path to the Cobertura XML report.
          path: coverage.xml
          # Minimum total coverage, if you want to the
          # workflow to enforce it as a standard.
          # This has no effect if the `fail` arg is set to `false`.
          threshold: 80.123
          # Fail the workflow if the minimum code coverage
          # reuqirements are not satisfied.
          fail: true
          # Publish the rendered output as a PR comment
          publish: true
          # Create a coverage diff report.
          diff: true
          # Branch to diff against.
          # Compare the current coverage to the coverage
          # determined on this branch.
          diff-branch: main
          # This is where the coverage reports for the
          # `diff-branch` are stored.
          # Branch is created if it doesn't already exist'.
          diff-storage: _xml_coverage_reports
          # A custom title that can be added to the code
          # coverage summary in the PR comment.
          coverage-summary-title: "Code Coverage Summary"

  # Job 6: DAST scan with OWASP ZAP
  dast-zap:
    name: Dynamic Application Security Testing
    needs: [validate-pr, formatting-and-linting]
    if: needs.validate-pr.outputs.is-valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv and dependencies
        run: |
          pip install uv
          uv sync --frozen

      - name: Start FastAPI application in background
        run: |
          source .venv/bin/activate
          PYTHONPATH=. uvicorn src.main:app --host 0.0.0.0 --port 8000 &
          echo "FastAPI_PID=$!" >> $GITHUB_ENV
        
      - name: Wait for application to start
        run: |
          echo "Waiting for FastAPI to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8000/ > /dev/null; then
              echo "FastAPI is running!"
              break
            fi
            echo "Attempt $i: FastAPI not ready yet, waiting..."
            sleep 2
          done
          curl -f http://localhost:8000/ || (echo "FastAPI failed to start" && exit 1)

      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'http://localhost:8000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -J report_json.json'
          fail_action: false
          allow_issue_writing: false

      - name: Upload ZAP reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            report_html.html
            report_json.json

      - name: Comment PR with DAST results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let dastStatus = '✅ No security vulnerabilities found';
            let vulnerabilityDetails = '';
            let alertsSummary = '';
            
            try {
              let alertCounts = { high: 0, medium: 0, low: 0, informational: 0 };
              let alertDetails = [];
              
              // Try to read JSON report first (more accurate)
              if (fs.existsSync('report_json.json')) {
                const zapReport = JSON.parse(fs.readFileSync('report_json.json', 'utf8'));
                
                if (zapReport.site && zapReport.site[0] && zapReport.site[0].alerts) {
                  const alerts = zapReport.site[0].alerts;
                  
                  alerts.forEach(alert => {
                    const risk = alert.riskdesc ? alert.riskdesc.toLowerCase() : 'unknown';
                    const name = alert.name || 'Unknown Alert';
                    const count = alert.instances ? alert.instances.length : 1;
                    
                    if (risk.includes('high')) {
                      alertCounts.high += count;
                    } else if (risk.includes('medium')) {
                      alertCounts.medium += count;
                    } else if (risk.includes('low')) {
                      alertCounts.low += count;
                    } else {
                      alertCounts.informational += count;
                    }
                    
                    alertDetails.push(`• **${name}** (${risk}) - ${count} instance(s)`);
                  });
                }
              } else if (fs.existsSync('report_html.html')) {
                // Fallback to HTML parsing
                const zapReport = fs.readFileSync('report_html.html', 'utf8');
                
                // Basic parsing from HTML
                const highMatches = zapReport.match(/FAIL-NEW:\s*(\d+)/);
                const warnMatches = zapReport.match(/WARN-NEW:\s*(\d+)/);
                const passMatches = zapReport.match(/PASS:\s*(\d+)/);
                
                if (highMatches) alertCounts.high = parseInt(highMatches[1]) || 0;
                if (warnMatches) alertCounts.medium = parseInt(warnMatches[1]) || 0;
                if (passMatches) {
                  const passed = parseInt(passMatches[1]) || 0;
                  alertsSummary = `\n✅ **Passed Checks**: ${passed}`;
                }
              }
              
              const totalIssues = alertCounts.high + alertCounts.medium + alertCounts.low;
              
              if (alertCounts.high > 0) {
                dastStatus = '🚨 High-risk security vulnerabilities detected';
                vulnerabilityDetails = `\n**Vulnerabilities Found**: ${alertCounts.high} High, ${alertCounts.medium} Medium, ${alertCounts.low} Low`;
              } else if (alertCounts.medium > 0) {
                dastStatus = '⚠️ Medium-risk security issues detected';
                vulnerabilityDetails = `\n**Issues Found**: ${alertCounts.medium} Medium, ${alertCounts.low} Low`;
              } else if (alertCounts.low > 0) {
                dastStatus = '📝 Low-risk security findings detected';
                vulnerabilityDetails = `\n**Findings**: ${alertCounts.low} Low-risk`;
              }
              
              // Add detailed alert information if available
              if (alertDetails.length > 0 && alertDetails.length <= 10) {
                vulnerabilityDetails += `\n\n**Alert Details**:\n${alertDetails.join('\n')}`;
              } else if (alertDetails.length > 10) {
                vulnerabilityDetails += `\n\n**Alert Details** (showing first 10 of ${alertDetails.length}):\n${alertDetails.slice(0, 10).join('\n')}`;
              }
              
            } catch (error) {
              dastStatus = '❌ DAST scan failed';
              console.log('Error reading ZAP report:', error);
            }
            
            const comment = `## 🔍 Dynamic Application Security Testing (ZAP)
            
            ${dastStatus}${vulnerabilityDetails}${alertsSummary}
            
            **Target**: http://localhost:8000  
            **Scan Type**: OWASP ZAP Baseline Scan  
            **Job**: Dynamic Application Security Testing  
            **Workflow**: ${context.workflow}  
            **Run**: ${context.runNumber}
            
            ${vulnerabilityDetails ? '📋 **Full Report**: Check the ZAP reports in workflow artifacts for complete details.' : ''}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Stop FastAPI application
        if: always()
        run: |
          if [ ! -z "$FastAPI_PID" ]; then
            kill $FastAPI_PID || true
          fi

  # Job 7: Summary comment for overall results
  pr-summary:
    if: always() && needs.validate-pr.outputs.is-valid == 'true'
    needs: [validate-pr, formatting-and-linting, run-pytest, coverage, run-bandit, run-safety, dast-zap]
    runs-on: ubuntu-latest
    steps:
      - name: Create PR summary comment
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = [
              { name: 'Code Formatting & Linting', status: '${{ needs.formatting-and-linting.result }}' },
              { name: 'Unit Tests', status: '${{ needs.run-pytest.result }}' },
              { name: 'Coverage Report', status: '${{ needs.coverage.result }}' },
              { name: 'Security Scan (Bandit)', status: '${{ needs.run-bandit.result }}' },
              { name: 'Dependency Check (Safety)', status: '${{ needs.run-safety.result }}' },
              { name: 'DAST Security Scan (ZAP)', status: '${{ needs.dast-zap.result }}' }
            ];
            
            let overallStatus = '✅ All checks passed';
            let allPassed = true;
            
            const jobResults = jobs.map(job => {
              let emoji = '✅';
              if (job.status === 'failure') {
                emoji = '❌';
                allPassed = false;
              } else if (job.status === 'cancelled') {
                emoji = '⏹️';
                allPassed = false;
              } else if (job.status === 'skipped') {
                emoji = '⏭️';
              }
              return `${emoji} ${job.name}`;
            }).join('\n');
            
            if (!allPassed) {
              overallStatus = '❌ Some checks failed';
            }
            
            const comment = `## 📋 CI/CD Pipeline Summary
            
            ${overallStatus}
            
            ### Job Results:
            ${jobResults}
            
            **Workflow**: ${context.workflow}
            **Run**: ${context.runNumber}
            **PR**: #${context.issue.number}
            
            ---
            *This comment is automatically updated on each push to the PR.*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });