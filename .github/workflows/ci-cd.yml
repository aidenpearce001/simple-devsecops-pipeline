name: DevSecOps CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  # Job 1: Run unit tests and generate a coverage report
  test-and-coverage:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi "uvicorn[standard]" pytest httpx pytest-cov

      - name: Run unit tests with coverage
        run: |
          pytest --cov=./src --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
          
  # Job 2: Run a static analysis security scan with Bandit
  sast-scan:
    needs: test-and-coverage  # This job depends on tests passing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit scan
        run: bandit -r src -ll -f json -o bandit-report.json

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

  # Job 3: Run a dependency security scan with OWASP Dependency-Check
  dependency-scan:
    needs: sast-scan # This job depends on SAST scan passing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency-Check
        # This action runs a Docker container with the tool
        uses: dependency-check/Dependency-Check@5.0.0
        with:
          project: 'fastapi-project'
          format: 'ALL'
          args: --scan src/ --failOnCVSS 7.0

  # Job 4: Build a Docker image and scan it with Trivy
  build-and-scan-docker:
    needs: dependency-scan # This job depends on the dependency scan passing
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
          file: ./Dockerfile

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/${{ github.repository }}:latest'
          format: 'table'
          severity: 'HIGH,CRITICAL'
          
  # Job 5: Deploy to a staging environment and run DAST scan with ZAP
  dast-and-deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs: build-and-scan-docker # This job depends on the build and scan passing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Placeholder for a real deployment step (e.g., to a cloud service)
      - name: Deploy to Staging Environment
        run: echo "Deploying application to staging..."
      
      - name: Run OWASP ZAP DAST scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: 'http://your-staging-url.com' # Replace with your staging environment URL
          fail_action: true
          
  # Job 6: Final deployment to production
  deploy-production:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build-and-scan-docker # Only run DAST if needed, then deploy
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Production Environment
        run: echo "Deploying application to production..."